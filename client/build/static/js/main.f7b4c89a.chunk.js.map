{"version":3,"sources":["components/Result.js","QuestionRoot/index.js","components/QuestionBox.js","images/knowcs-icon.png","index.js"],"names":["Result","score","resetInstance","className","onClick","getQuestions","a","fetch","request","json","response","Promise","resolve","then","r","sort","Math","random","slice","QuestionBox","question","options","selected","useState","answer","setAnswer","map","text","index","KnowCS","state","questionSet","responses","QuestionRoot","setState","getAnswer","correctAnswer","this","src","Logo","length","answers","correct","questionID","Component","ReactDOM","render","document","getElementById"],"mappings":"2NAWeA,EATA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,cAAT,OACX,sBAAKC,UAAU,cAAf,UACI,sBAAKA,UAAU,QAAf,0BAAqCF,EAArC,8BACA,wBAAQE,UAAU,UAAUC,QAASF,EAArC,4B,SCHOG,I,2EAAf,8BAAAC,EAAA,sEACwBC,MAAM,aAD9B,cACQC,EADR,gBAEyBA,EAAQC,OAFjC,cAEQC,EAFR,yBAGSA,GAHT,4C,sBAMe,wBACfC,QAAQC,QAAQP,IACfQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MACP,iBAAM,GAAMC,KAAKC,YAChBC,MAAM,EAAG,S,OCUDC,EApBK,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAAe,EACzBC,mBAASF,GADgB,mBAC9CG,EAD8C,KACtCC,EADsC,KAErD,OACI,sBAAKtB,UAAU,cAAf,UACI,qBAAKA,UAAU,WAAf,SAA2BiB,IAC1BI,EAAOE,KAAI,SAACC,EAAMC,GAAP,OACT,wBACAzB,UAAU,YACVC,QAAS,WACLqB,EAAU,CAACE,IACXL,EAASK,IAJb,SAOKA,GAPQC,UCRb,MAA0B,wCCQnCC,E,4MACFC,MAAQ,CACJC,YAAa,GACb9B,MAAO,EACP+B,UAAW,G,EAEf3B,aAAe,WACX4B,IAAepB,MAAK,SAAAO,GAChB,EAAKc,SAAS,CACVH,YAAaX,Q,EAIzBe,UAAY,SAACX,EAAQY,GACbZ,IAAWY,GACX,EAAMF,SAAS,CACfjC,MAAO,EAAK6B,MAAM7B,MAAQ,IAG9B,EAAKiC,SAAS,CACVF,UAAW,EAAKF,MAAME,UAAY,GAAK,EAAKF,MAAME,UAAY,EAAI,M,EAG1E9B,cAAgB,WACZ,EAAKG,eACL,EAAK6B,SAAS,CACVH,YAAa,GACb9B,MAAO,EACP+B,UAAW,K,uDAGnB,WACIK,KAAKhC,iB,oBAET,WAAU,IAAD,OACL,OACI,sBAAKF,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,UACA,qBAAKmC,IAAKC,IADV,uDAICF,KAAKP,MAAMC,YAAYS,OAAS,GACjCH,KAAKP,MAAME,UAAY,IACvBK,KAAKP,MAAMC,YAAYL,KACnB,gBAAEN,EAAF,EAAEA,SAAUqB,EAAZ,EAAYA,QAASC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,WAA9B,OACI,cAAC,EAAD,CACAvB,SAAUA,EACVC,QAASoB,EAETnB,SAAU,SAAAE,GAAM,OAAI,EAAKW,UAAUX,EAAQkB,KADtCC,MAKa,KAAzBN,KAAKP,MAAME,UAAoB,cAAC,EAAD,CAChC/B,MAAOoC,KAAKP,MAAM7B,MAClBC,cAAemC,KAAKnC,gBACd,Y,GAxDD0C,aA8DrBC,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,eAAe,W","file":"static/js/main.f7b4c89a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Result = ({score, resetInstance}) => (\n    <div className=\"score-board\">\n        <div className=\"score\">You answered {score} / 10 answers correctly.</div>\n        <button className=\"playBtn\" onClick={resetInstance}>\n            Play again\n        </button>\n    </div>\n)\n\nexport default Result;","import Result from \"../components/Result\";\n\nasync function getQuestions() {\n  const request = await fetch(\"/endpoint\")\n  const response = await request.json()\n  return response;\n}\n\nexport default (n = 10) =>\nPromise.resolve(getQuestions()\n.then(r => r.sort(\n      () => 0.5 - Math.random())\n      .slice(0, 10)));\n","import React, { useState } from \"react\";\n\nconst QuestionBox = ({ question, options, selected }) => {\n    const [answer, setAnswer] = useState(options);\n    return (\n        <div className=\"questionBox\">\n            <div className=\"question\">{question}</div>\n            {answer.map((text, index) => (\n               <button key={index} \n               className=\"answerBtn\"\n               onClick={() => {\n                   setAnswer([text]);\n                   selected(text);\n               }}\n               >\n                   {text}\n                   </button>\n            ))}\n        </div>\n    );\n};\n\nexport default QuestionBox;","export default __webpack_public_path__ + \"static/media/knowcs-icon.92a441a7.png\";","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\nimport QuestionRoot from \"./QuestionRoot\";\nimport QuestionBox from \"./components/QuestionBox\";\nimport Result from \"./components/Result\";\nimport Logo from \"./images/knowcs-icon.png\";\n\nclass KnowCS extends Component {\n    state = {\n        questionSet: [],\n        score: 0,\n        responses: 0\n    };\n    getQuestions = () => {\n        QuestionRoot().then(question => {\n            this.setState({\n                questionSet: question\n            });\n        });\n    };\n    getAnswer = (answer, correctAnswer) => {\n        if (answer === correctAnswer) {\n            this. setState({\n            score: this.state.score + 1\n            });\n        }\n        this.setState({\n            responses: this.state.responses < 10 ? this.state.responses + 1 : 10\n        });\n    }\n    resetInstance = () => {\n        this.getQuestions();\n        this.setState({\n            questionSet: [],\n            score: 0,\n            responses: 0\n        });\n    };\n    componentDidMount() {\n        this.getQuestions();\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"title\">\n                <img src={Logo}/>\n                Know CS: Algorithms, Data Structures and Concepts\n                </div>\n                {this.state.questionSet.length > 0 && \n                this.state.responses < 10 &&\n                this.state.questionSet.map(\n                    ({question, answers, correct, questionID}) => (\n                        <QuestionBox \n                        question={question}\n                        options={answers}\n                        key={questionID}\n                        selected={answer => this.getAnswer(answer, correct)}\n                        />\n                    )\n                )}\n                {this.state.responses === 10 ? (<Result \n                score={this.state.score}\n                resetInstance={this.resetInstance}\n                />) : null } \n            </div>\n        );\n    }\n}\n\nReactDOM.render(<KnowCS />, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}